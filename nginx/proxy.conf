worker_processes  2;

events {
    worker_connections  10240;
}


http{
    error_log  ./logs/proxy.log info;
    lua_shared_dict tcp_content 10m;  # 定义一个共享字典，用于存储TCP请求内容
    lua_shared_dict urls 10m; 
    init_worker_by_lua_block{
        if ngx.worker.id() ~= 0 then
            return
        end 
   
        local redis = require "resty.redis"
        local urls_from_shm = ngx.shared.urls

        local function update_urls()
            local rdb = redis:new()
            local ok, err = rdb:connect("127.0.0.1", 6379)
            if err then
                return
            end
            local urls, err = rdb:smembers("urls")
            if err then
                return
            end
            urls_from_shm:flush_all()
            for _, v in ipairs(urls) do
                urls_from_shm:set(v, true)
            end
            ngx.timer_at(3, update_urls)
        end

        ngx.timer_at(1, update_urls)
    }

    upstream openresty_ups {
        server 0.0.0.1;
        balancer_by_lua_file ./balancer.lua;
    }

    server {
        listen 9004;
        location / {
            proxy_pass http://openresty_ups;
        }
    }
}
# http {
#     error_log  ./logs/proxy.log info;
#     # proxy_protocol on; #表示Nginx 期待上游连接（如 LVS、HAProxy）使用Proxy Protocol协议传入客户端IP信息
#     upstream backend {
#         # 后端服务器由proxy_nginx.conf配置
#         server 192.168.23.150:7001;
#         server 192.168.23.150:7002;
#         server 192.168.23.150:7003;
#     }

#     server {
#         listen 9001;
#         location / {
#             proxy_pass http://backend;
            
#         }
#     }
# }

stream {
    upstream tcp_backend {
        server 192.168.23.150:9001;
    }

    server {
        listen 9002;
        proxy_pass tcp_backend;
        proxy_protocol on;  # 启用Proxy Protocol以获取客户端IP
    }

    server {
        listen 9003;
        content_by_lua_file ./tcp_content.lua;  # 使用Lua脚本处理TCP请求
    }
        
}